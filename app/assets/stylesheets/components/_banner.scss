.banner {
  background-image: asset_url("background3D.png");
  background-size: cover;
  object-fit: cover;
  background-position: center;
  padding: 180px 0;
}

.banner h1 {
  margin: 0;
  color: #022147;
  text-shadow: 1px 1px 3px rgb(164, 164, 164);
  font-size: 60px;
  font-weight: bold;
}

.banner p {
  font-size: 20px;
  color: #022147;
  opacity: .7;
  text-shadow: 1px 1px 3px rgb(164, 164, 164);
}

.img-home {
  text-align: center;
  margin-bottom: -14px;
  img {
    width: 225px;
    text-align: center;
    margin-bottom: -30px;
  }
  h1, h2 {
    color: #022147;
  }
  h1 {
    font-size: 65px;
    position: relative;
    top: 30px;
  }
  h2 {
    background-color: #fea93a;
    border-radius: 8px;
    height: 50px;
    text-align: center;
    padding-top: 4px;
  }
}

.img-home3 {
  text-align: center;
  img {
    width: 210px;
    margin-top: -55px;

  }
  h1, h2 {
    color: #022147;
  }
  h1 {
    font-size: 65px;
    position: relative;
    top: 30px;
  }
  h2 {
    background-color: #fea93a;
    border-radius: 8px;
    height: 50px;
    text-align: center;
    padding-top: 4px;
  }
}

.img-home2 {
  text-align: center;
  margin-top: 60px;
  img {
    width: 125px;
  }
  h1, h2 {
    color: #022147;
  }
  h1 {
    font-size: 65px;
    position: relative;
    top: 30px;
  }
  h2 {
    background-color: #fea93a;
    border-radius: 8px;
    height: 50px;
    text-align: center;
    padding-top: 4px;
  }
}


// :root {
//   /* The intrinsic width of the underline stroke (in pixels). This is
//    * the same as the height of the cap images. Don't specify the
//    * units! This is because of some of the calculations we do later on. */
//   --underline-intrinsic-width: 8;

//   /* The actual width of the underline stroke we want to render (in pixels).
//    * You can modify this, and the sizing and positioning should be calculated
//    * accordingly. Again, Don't specify the units! */
//   --underline-width: 12;

//   /* The colour used to draw the underline. It should match the colour
//    * used in the cap images... unfortunately we can't modify the SVG
//    * fill via CSS because it's a background image. */
//   --underline-color: #EBF3FD;

//   /* We need to know the width of the cap images so that we
//    * can position everything on the x axis accordingly. */
//   --underline-cap-width: 4px;

//   /* The border is positioned relative to the bottom of the line.
//    * We can move it upwards a little to create an overlap effect. */
//   --underline-offset-y: -2px;

//   /* The padding to add to the x axis. By default, the caps would be
//    * aligned with the beginning and end of the line. */
//   --underline-padding-x: 0.15em;

//   /* The cap images to use that form the left and right rounded
//    * shape. I guess these could be any shape, they don't
//    * necessarily have to be round ðŸ™‚.
//    */
//   --cap-image-left: url(https://files-d4s40otz1.now.sh/left.svg);
//   --cap-image-right: url(https://files-4vvqilj8v.now.sh/right.svg);
// }

// .heading {
//   --underline-width-scale: calc(var(--underline-width) / var(--underline-intrinsic-width));
//   padding: 0 calc(var(--underline-padding-x) + calc(var(--underline-cap-width) * var(--underline-width-scale)));
//   box-decoration-break: clone;
//   background-repeat: no-repeat;
//   color: #022147;
//   background-image:
//     linear-gradient(180deg, var(--underline-color), var(--underline-color)),
//     var(--cap-image-left),
//     var(--cap-image-right);
//   background-position-x:
//     calc(var(--underline-cap-width) * var(--underline-width-scale)),
//     0,
//     100%;
//   background-position-y: calc(100% - var(--underline-offset-y) * -1);
//   background-size:
//     calc(100% - calc(var(--underline-cap-width) * var(--underline-width-scale) * 2)) calc(var(--underline-width) * 1px),
//     auto calc(var(--underline-width) * 1px),
//     auto calc(var(--underline-width) * 1px);
// }
